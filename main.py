#!/usr/bin/env python3
# main.py
## –í–µ—Ä—Å–∏—è: 1.0
## –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard
##
## –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
## –≤–∫–ª—é—á–∞—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏, IP-–∞–¥—Ä–µ—Å, –∏ QR-–∫–æ–¥. –°–∫—Ä–∏–ø—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Å–µ—Ç—å
## –Ω–∞ –æ—Å–Ω–æ–≤–µ IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ (SERVER_WG_IPV4) –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å WireGuard.

import sys
import os
import json
import ipaddress
from datetime import datetime
import settings
from modules.config import load_params
from modules.keygen import generate_private_key, generate_public_key, generate_preshared_key
from modules.config_writer import add_user_to_server_config
from modules.directory_setup import setup_directories
from modules.client_config import create_client_config
from modules.main_registration_fields import create_user_record  # –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
import subprocess
import logging
import qrcode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)-8s %(message)s",
    handlers=[logging.StreamHandler()]
)

DEBUG_EMOJI = "üêõ"
INFO_EMOJI = "‚ÑπÔ∏è"
WARNING_EMOJI = "‚ö†Ô∏è"
ERROR_EMOJI = "‚ùå"
WG_EMOJI = "üåê"
FIREWALL_EMOJI = "üõ°Ô∏è"

class EmojiLoggerAdapter(logging.LoggerAdapter):
    def process(self, msg, kwargs):
        if kwargs.get('level', logging.INFO) == logging.DEBUG:
            msg = f"{DEBUG_EMOJI}  {msg}"
        elif kwargs.get('level', logging.INFO) == logging.INFO:
            msg = f"{INFO_EMOJI}  {msg}"
        elif kwargs.get('level', logging.INFO) == logging.WARNING:
            msg = f"{WARNING_EMOJI}  {msg}"
        elif kwargs.get('level', logging.INFO) == logging.ERROR:
            msg = f"{ERROR_EMOJI}  {msg}"
        return msg, kwargs

logger = EmojiLoggerAdapter(logging.getLogger(__name__), {})

def calculate_subnet(server_wg_ipv4, default_subnet="10.66.66.0/24"):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Å–µ—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ WireGuard.
    :param server_wg_ipv4: IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ WireGuard.
    :param default_subnet: –ü–æ–¥—Å–µ—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    :return: –ü–æ–¥—Å–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CIDR (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10.66.66.0/24').
    """
    try:
        ip = ipaddress.ip_interface(f"{server_wg_ipv4}/24")
        subnet = str(ip.network)
        logger.debug(f"–ü–æ–¥—Å–µ—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ SERVER_WG_IPV4: {subnet}")
        return subnet
    except ValueError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–æ–¥—Å–µ—Ç–∏: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_subnet}")
        return default_subnet

def generate_next_ip(config_file, subnet="10.66.66.0/24"):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π IP-–∞–¥—Ä–µ—Å –≤ –ø–æ–¥—Å–µ—Ç–∏.
    :param config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard.
    :param subnet: –ü–æ–¥—Å–µ—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ IP.
    :return: –°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π IP-–∞–¥—Ä–µ—Å.
    """
    logger.debug(f"–ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π IP-–∞–¥—Ä–µ—Å –≤ –ø–æ–¥—Å–µ—Ç–∏ {subnet}.")
    existing_ips = []
    if os.path.exists(config_file):
        logger.debug(f"–ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {config_file}.")
        with open(config_file, "r") as f:
            for line in f:
                if line.strip().startswith("AllowedIPs"):
                    ip = line.split("=")[1].strip().split("/")[0]
                    existing_ips.append(ip)
    network = ipaddress.ip_network(subnet)
    for ip in network.hosts():
        ip_str = str(ip)
        if ip_str not in existing_ips and not ip_str.endswith(".0") and not ip_str.endswith(".1") and not ip_str.endswith(".255"):
            logger.debug(f"–°–≤–æ–±–æ–¥–Ω—ã–π IP-–∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω: {ip_str}")
            return ip_str
    logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥—Å–µ—Ç–∏.")
    raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥—Å–µ—Ç–∏.")

def generate_qr_code(data, output_path):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    :param data: –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard.
    :param output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞.
    """
    logger.debug(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–ª–∏–Ω–æ–π {len(data)} —Å–∏–º–≤–æ–ª–æ–≤.")
    try:
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(data)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        img.save(output_path)
        logger.info(f"QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")
        raise

def load_existing_users():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    user_records_path = os.path.join("user", "data", "user_records.json")
    logger.debug(f"–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {user_records_path}")
    if os.path.exists(user_records_path):
        with open(user_records_path, "r", encoding="utf-8") as file:
            try:
                user_data = json.load(file)
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return {user.lower(): user_data[user] for user in user_data}  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞
            except json.JSONDecodeError as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –±–∞–∑—É.")
                return {}
    logger.warning(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {user_records_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return {}

def is_user_in_server_config(nickname, config_file):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.
    """
    nickname_lower = nickname.lower()
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {nickname} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file}.")
    try:
        with open(config_file, "r") as file:
            for line in file:
                if nickname_lower in line.lower():
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
                    return True
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return False

def restart_wireguard(interface="wg0"):
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç WireGuard –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å.
    """
    try:
        logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ WireGuard: {interface}")
        subprocess.run(["sudo", "systemctl", "restart", f"wg-quick@{interface}"], check=True)
        logger.info(f"{WG_EMOJI} WireGuard –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å {interface} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ WireGuard
        wg_status = subprocess.check_output(["sudo", "systemctl", "status", f"wg-quick@{interface}"]).decode()
        for line in wg_status.splitlines():
            if "Active:" in line:
                logger.info(f"{WG_EMOJI} –°—Ç–∞—Ç—É—Å WireGuard: {line.strip()}")

        # –í—ã–≤–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è firewall
        firewall_status = subprocess.check_output(["sudo", "firewall-cmd", "--list-ports"]).decode()
        for line in firewall_status.splitlines():
            logger.info(f"{FIREWALL_EMOJI} –°–æ—Å—Ç–æ—è–Ω–∏–µ firewall: {line.strip()}")

    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ WireGuard: {e}")

def generate_config(nickname, params, config_file, email="N/A", telegram_id="N/A"):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ QR-–∫–æ–¥–∞.
    """
    logger.info("+--------- –ü—Ä–æ—Ü–µ—Å—Å üå± —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ---------+")
    try:
        logger.info(f"{INFO_EMOJI} –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {nickname}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è SERVER_PUB_IP
        server_public_key = params['SERVER_PUB_KEY']
        if not params.get('SERVER_PUB_IP'):
            raise ValueError("–ü–∞—Ä–∞–º–µ—Ç—Ä SERVER_PUB_IP –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        
        endpoint = f"{params['SERVER_PUB_IP']}:{params['SERVER_PORT']}"
        dns_servers = f"{params['CLIENT_DNS_1']},{params['CLIENT_DNS_2']}"

        private_key = generate_private_key()
        logger.debug(f"{DEBUG_EMOJI} –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
        public_key = generate_public_key(private_key)
        logger.debug(f"{DEBUG_EMOJI} –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
        preshared_key = generate_preshared_key()
        logger.debug(f"{DEBUG_EMOJI} –ü—Ä–µ—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–¥—Å–µ—Ç–∏
        subnet = calculate_subnet(params.get('SERVER_WG_IPV4', '10.66.66.1'))
        logger.debug(f"{DEBUG_EMOJI} –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–æ–¥—Å–µ—Ç—å: {subnet}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è IP-–∞–¥—Ä–µ—Å–∞
        new_ipv4 = generate_next_ip(config_file, subnet)
        logger.info(f"{INFO_EMOJI} –ù–æ–≤—ã–π IP-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_ipv4}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        client_config = create_client_config(
            private_key=private_key,
            address=new_ipv4,
            dns_servers=dns_servers,
            server_public_key=server_public_key,
            preshared_key=preshared_key,
            endpoint=endpoint
        )
        logger.debug(f"{DEBUG_EMOJI} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")

        config_path = os.path.join(settings.WG_CONFIG_DIR, f"{nickname}.conf")
        qr_path = os.path.join(settings.QR_CODE_DIR, f"{nickname}.png")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        os.makedirs(settings.WG_CONFIG_DIR, exist_ok=True)
        with open(config_path, "w") as file:
            file.write(client_config)
        logger.info(f"{INFO_EMOJI} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_path}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        generate_qr_code(client_config, qr_path)
        logger.info(f"{INFO_EMOJI} QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {qr_path}")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
        add_user_to_server_config(config_file, nickname, public_key.decode('utf-8'), preshared_key.decode('utf-8'), new_ipv4)
        logger.info(f"{INFO_EMOJI} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞.")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_record = create_user_record(
            username=nickname,
            address=new_ipv4,
            public_key=public_key.decode('utf-8'),
            preshared_key=preshared_key.decode('utf-8'),
            qr_code_path=qr_path,
            email=email,
            telegram_id=telegram_id
        )
        logger.debug(f"{DEBUG_EMOJI} –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_records_path = os.path.join("user", "data", "user_records.json")
        os.makedirs(os.path.dirname(user_records_path), exist_ok=True)
        with open(user_records_path, "r+", encoding="utf-8") as file:
            try:
                user_data = json.load(file)
                logger.debug(f"{DEBUG_EMOJI} –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            except json.JSONDecodeError:
                user_data = {}
                logger.warning(f"{WARNING_EMOJI} –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è.")
            user_data[nickname] = user_record
            file.seek(0)
            json.dump(user_data, file, indent=4)
            file.truncate()
        logger.info(f"{INFO_EMOJI} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {nickname} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {user_records_path}")

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è WireGuard
        try:
            stripped_config = subprocess.check_output(['wg-quick', 'strip', 'wg0'])
            with tempfile.NamedTemporaryFile(delete=False) as temp_file:
                temp_file.write(stripped_config)
                temp_file.flush()
                subprocess.run(['wg', 'syncconf', 'wg0', temp_file.name], check=True)
            logger.info(f"{WG_EMOJI} –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        except subprocess.CalledProcessError as e:
            logger.error(f"{ERROR_EMOJI} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard: {e}")
            raise
        except Exception as e:
            logger.error(f"{ERROR_EMOJI} –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ WireGuard: {e}")
            raise

        logger.info("+--------- –ü—Ä–æ—Ü–µ—Å—Å üå± —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω --------------+\n")
        return config_path, qr_path
    except Exception as e:
        logger.error(f"{ERROR_EMOJI} –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        raise

if __name__ == "__main__":
    if len(sys.argv) < 2:
        logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 main.py <nickname> [email] [telegram_id]")
        sys.exit(1)

    nickname = sys.argv[1]
    email = sys.argv[2] if len(sys.argv) > 2 else "N/A"
    telegram_id = sys.argv[3] if len(sys.argv) > 3 else "N/A"
    params_file = settings.PARAMS_FILE

    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è WireGuard.")
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.")
        setup_directories()

        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {params_file}")
        params = load_params(params_file)

        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        existing_users = load_existing_users()
        if nickname.lower() in existing_users:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{nickname}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            sys.exit(1)

        if is_user_in_server_config(nickname, settings.SERVER_CONFIG_FILE):
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{nickname}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
            sys.exit(1)

        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        config_file = settings.SERVER_CONFIG_FILE
        config_path, qr_path = generate_config(nickname, params, config_file, email, telegram_id)

        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_path}")
        logger.info(f"‚úÖ QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {qr_path}")
    except FileNotFoundError as e:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    except KeyError as e:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {e}")
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
