#!/usr/bin/env python3
# ai_diagnostics/ai_diagnostics_summary.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ pyWGgen.
# –í–µ—Ä—Å–∏—è: 1.7
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-12-02

import json
import subprocess
from pathlib import Path
import sys
import logging
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = Path(__file__).resolve().parent.parent
sys.path.append(str(PROJECT_ROOT))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from settings import PROJECT_DIR, SUMMARY_REPORT_PATH, USER_DB_PATH, LOG_LEVEL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.getLevelName(LOG_LEVEL),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ settings
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("diagnostics_summary.log", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)


def run_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e.stderr.strip()}")
        return f"–û—à–∏–±–∫–∞: {e.stderr.strip()}"


def check_ports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã."""
    command = ["ss", "-tuln"]
    result = run_command(command)
    open_ports = []
    if not result:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤.")
        return open_ports

    for line in result.splitlines():
        if ":51820" in line:
            open_ports.append("51820 (WireGuard)")
        if ":7860" in line:
            open_ports.append("7860 (Gradio)")
    logger.debug(f"–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {open_ports}")
    return open_ports


def check_firewall():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–µ—Ä–≤–æ–ª–∞ –∏ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤."""
    command_status = ["firewall-cmd", "--state"]
    command_ports = ["firewall-cmd", "--list-ports"]
    status = run_command(command_status)
    if status != "running":
        logger.warning(f"–§–∞–µ—Ä–≤–æ–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: {status}")
        return f"–§–∞–µ—Ä–≤–æ–ª: {status}", []
    open_ports = run_command(command_ports).split()
    logger.debug(f"–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã —Ñ–∞–µ—Ä–≤–æ–ª–∞: {open_ports}")
    return f"–§–∞–µ—Ä–≤–æ–ª: –ê–∫—Ç–∏–≤–µ–Ω", open_ports


def check_wireguard_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å WireGuard."""
    command_status = ["sudo", "systemctl", "is-active", "wg-quick@wg0"]
    command_info = ["sudo", "wg", "show"]
    status = run_command(command_status)
    logger.debug(f"WireGuard —Å—Ç–∞—Ç—É—Å: {status}")

    if status == "active":
        wg_info = run_command(command_info)
        logger.debug(f"WireGuard –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{wg_info}")
        return status, wg_info
    return status, "WireGuard –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"


def count_users():
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ user_records.json."""
    if USER_DB_PATH.exists():
        try:
            with open(USER_DB_PATH, "r", encoding="utf-8") as file:
                user_data = json.load(file)
                user_count = len(user_data)
                logger.debug(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
                return user_count, "user_records.json"
        except json.JSONDecodeError:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ user_records.json.")
            return 0, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è user_records.json"
    logger.warning(f"–§–∞–π–ª user_records.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    return 0, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª user_records.json"


def count_peers(wg_info):
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ peer –≤ –≤—ã–≤–æ–¥–µ wg show."""
    if not wg_info:
        logger.warning(f"WireGuard –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return 0
    peer_count = sum(1 for line in wg_info.splitlines() if line.startswith("peer:"))
    logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ peer: {peer_count}")
    return peer_count


def generate_summary():
    """–°–æ–∑–¥–∞–µ—Ç –û—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ pyWGgen"""
    logger.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –û—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ pyWGgen –æ—Ç—á–µ—Ç–∞.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    total_users, user_source = count_users()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ WireGuard
    wg_status, wg_info = check_wireguard_status()
    peers_count = count_peers(wg_info) if wg_status == "active" else 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    open_ports = check_ports()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–µ—Ä–≤–æ–ª–∞
    firewall_status, firewall_ports = check_firewall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    summary = [
        #" === üìã –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ pyWGgen ===",
        " üìÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
        f"- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users} (–ò—Å—Ç–æ—á–Ω–∏–∫: {user_source})",
        "\n üîí WireGuard:",
        f" - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ peer: {peers_count} (–ò—Å—Ç–æ—á–Ω–∏–∫: wg show)",
        f" - –°—Ç–∞—Ç—É—Å WireGuard: {wg_status}",
        f" - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WireGuard:\n{wg_info if wg_status == 'active' else ''}",
        "\n üåê Gradio:",
        f" - –°—Ç–∞—Ç—É—Å: {'–ù–µ –∑–∞–ø—É—â–µ–Ω' if '7860 (Gradio)' not in open_ports else '–ó–∞–ø—É—â–µ–Ω'}",
        "   - –î–ª—è –∑–∞–ø—É—Å–∫–∞:",
        f"    1Ô∏è‚É£  –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞:",
        "    2Ô∏è‚É£  –í—ã–ø–æ–ª–Ω–∏—Ç–µ \"üåê  –û—Ç–∫—Ä—ã—Ç—å Gradio –∞–¥–º–∏–Ω–∫—É\"",
        "\n üî• –§–∞–µ—Ä–≤–æ–ª:",
        f" - {firewall_status}",
        " - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:",
        f"  - {', '.join(firewall_ports) if firewall_ports else '–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤'}",
        "\n üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
        " - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ peer —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        " - –ï—Å–ª–∏ Gradio –Ω–µ –∑–∞–ø—É—â–µ–Ω, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.",
        " - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ—Ä—Ç—ã –¥–ª—è Gradio –∏ WireGuard –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ —Ñ–∞–µ—Ä–≤–æ–ª.\n\n"
    ]

    # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    formatted_summary = "\n".join(summary).format(
        PROJECT_DIR=PROJECT_DIR  # –î–æ–±–∞–≤–∏–ª –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É PROJECT_DIR
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    try:
        with open(SUMMARY_REPORT_PATH, "w", encoding="utf-8") as file:
            file.write(formatted_summary)
        logger.info(f"–û–±—â–∏–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {SUMMARY_REPORT_PATH}")
        print(f"\n ‚úÖ –û–±—â–∏–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n üìÇ {SUMMARY_REPORT_PATH}")
        time.sleep(2.5)
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}\n")
        print(f" ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}\n")


if __name__ == "__main__":
    generate_summary()
