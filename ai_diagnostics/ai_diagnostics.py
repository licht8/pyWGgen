#!/usr/bin/env python3
# ai_diagnostics/ai_diagnostics.py
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ pyWGgen.
# –í–µ—Ä—Å–∏—è: 5.3
# –û–±–Ω–æ–≤–ª–µ–Ω–æ: 2024-12-02 22:00

import json
import time
import sys
import subprocess
import logging
from pathlib import Path

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = Path(__file__).resolve().parent.parent
MODULES_DIR = PROJECT_ROOT / "modules"
DIAGNOSTICS_DIR = PROJECT_ROOT / "ai_diagnostics"
SETTINGS_PATH = PROJECT_ROOT / "settings.py"

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ sys.path
sys.path.extend([str(PROJECT_ROOT), str(MODULES_DIR)])

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ settings.py
if not SETTINGS_PATH.exists():
    raise FileNotFoundError(f"–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ settings.py –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {SETTINGS_PATH}")

# –ò–º–ø–æ—Ä—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
from settings import (
    DEBUG_REPORT_PATH,
    TEST_REPORT_PATH,
    MESSAGES_DB_PATH,
    PROJECT_DIR,
    LOG_LEVEL,
    LOG_FILE_PATH,
    ANIMATION_SPEED,
    PRINT_SPEED,
    LINE_DELAY,
    GRADIO_PORT,
    USER_DB_PATH,
    QR_CODE_DIR,
    WIREGUARD_PORT,
)

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å–µ—Ç–∏ WireGuard
from utils import get_wireguard_subnet

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º logging
LOG_DIR = Path(LOG_FILE_PATH).parent
LOG_DIR.mkdir(parents=True, exist_ok=True)

logging.basicConfig(
    level=logging.getLevelName(LOG_LEVEL),
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE_PATH, encoding="utf-8"),
        logging.StreamHandler(sys.stdout),
    ],
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –ø–æ—Ä—Ç—ã
WIREGUARD_PORT = WIREGUARD_PORT
REQUIRED_PORTS = [f"{WIREGUARD_PORT}/udp", f"{GRADIO_PORT}/tcp"]

# –°–∫—Ä–∏–ø—Ç—ã
SUMMARY_SCRIPT = DIAGNOSTICS_DIR / "ai_diagnostics_summary.py"

def check_gradio_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ Gradio –Ω–∞ –ø–æ—Ä—Ç—É."""
    command = ["ss", "-tuln"]
    result = run_command(command)
    if not result:
        return False

    logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ Gradio:\n{result}")

    for line in result.splitlines():
        if f":{GRADIO_PORT} " in line and "LISTEN" in line:
            return True
    return False

def execute_commands(commands):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    results = []
    for command in commands:
        logger.info(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {command}")
        try:
            result = subprocess.run(command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)
            results.append(f"{command}:\n{result.stdout.strip()}")
        except subprocess.CalledProcessError as e:
            results.append(f"{command}:\n–û—à–∏–±–∫–∞: {e.stderr.strip()}")
    return "\n".join(results)


def run_command(command):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω–µ—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {' '.join(command)}: {e.stderr.strip()}")
        return None


def check_ports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ—Ä—Ç–æ–≤."""
    command = ["sudo", "firewall-cmd", "--list-all"]
    result = run_command(command)
    if not result:
        return []

    logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤:\n{result}")
    open_ports = []
    for line in result.splitlines():
        if "ports:" in line:
            ports_line = line.split("ports:")[1].strip()
            open_ports.extend(ports_line.split())
    return [port for port in REQUIRED_PORTS if port not in open_ports]


def check_masquerade_rules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª –º–∞—Å–∫–∞—Ä–∞–¥–∏–Ω–≥–∞ –¥–ª—è WireGuard."""
    command = ["sudo", "firewall-cmd", "--list-all"]
    result = run_command(command)
    if not result:
        return [{"type": "–û—à–∏–±–∫–∞", "rule": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Å–∫–∞—Ä–∞–¥–∏–Ω–≥"}]

    logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Å–∫–∞—Ä–∞–¥–∏–Ω–≥–∞:\n{result}")
    try:
        wireguard_subnet = get_wireguard_subnet()
        required_rules = [
            {"type": "IPv4", "rule": f"{wireguard_subnet.split('/')[0].rsplit('.', 1)[0]}.0/24"},
            {"type": "IPv6", "rule": "fd42:42:42::0/24"}
        ]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–æ–¥—Å–µ—Ç–∏ WireGuard: {e}")
        return [{"type": "–û—à–∏–±–∫–∞", "rule": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞"}]

    missing_rules = []
    for rule in required_rules:
        rule_str = f'rule family="{rule["type"].lower()}" source address="{rule["rule"]}" masquerade'
        if rule_str not in result:
            missing_rules.append(rule)

    return missing_rules


def parse_reports(messages_db_path):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—á–µ—Ç–æ–≤."""
    try:
        with open(messages_db_path, "r", encoding="utf-8") as db_file:
            messages_db = json.load(db_file)
    except FileNotFoundError:
        logger.error(f" ‚ùå –§–∞–π–ª messages_db.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {messages_db_path}")
        return [], []

    findings, suggestions = [], []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
    closed_ports = check_ports()
    if closed_ports:
        report = messages_db.get("ports_closed", {})
        if report:
            report["message"] = report["message"].format(
                PROJECT_DIR=PROJECT_DIR,
                USER_DB_PATH=USER_DB_PATH,
                QR_CODE_DIR=QR_CODE_DIR
            )
            findings.append(report)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å–∫–∞—Ä–∞–¥–∏–Ω–≥–∞
    missing_masquerade_rules = check_masquerade_rules()
    if missing_masquerade_rules:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–∞—Å–∫–∞—Ä–∞–¥–∏–Ω–≥–∞
        max_key_length = max(len(rule['type']) for rule in missing_masquerade_rules if isinstance(rule, dict))
        formatted_rules = "\n".join(
            f"        {rule['type']:<{max_key_length}}: {rule['rule']}" if isinstance(rule, dict) else f"        {rule}"
            for rule in missing_masquerade_rules
        )
        report = messages_db.get("masquerade_issue", {})
        if report:
            report["message"] = report["message"].format(
                MISSING_RULES=formatted_rules
            )
            findings.append(report)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Gradio
    if not check_gradio_status():
        report = messages_db.get("gradio_not_running", {})
        if report:
            report["message"] = report["message"].format(
                PROJECT_DIR=PROJECT_DIR,
                GRADIO_PORT=GRADIO_PORT
            )
            suggestions.append(report)

    return findings, suggestions


def display_message_slowly(message, print_speed=None, end="\n", indent=True):
    """
    –ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—á–∞—Ç–∏.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.
    :param print_speed: –°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö). –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è PRINT_SPEED.
    :param end: –°–∏–º–≤–æ–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "\n").
    :param indent: –ï—Å–ª–∏ True, –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—Ç—É–ø –≤ 3 –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–æ–π.
    """
    effective_speed = print_speed if print_speed is not None else PRINT_SPEED
    for line in message.split("\n"):
        if indent:
            print("   ", end="")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ indent=True
        for char in line:
            print(char, end="", flush=True)
            time.sleep(effective_speed)
        print(end, end="", flush=True)
        time.sleep(LINE_DELAY)




def handle_findings(findings):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã."""
    for finding in findings:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–æ–ª–æ—Å–æ–∫
        display_message_slowly(f"\n {finding['title']}\n{finding['message']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å
        commands = finding.get("commands", [])
        if commands:
            response = input(f"    üõ†  –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): ").strip().lower()
            if response in ["y", "–¥"]:
                display_message_slowly(f" ‚öôÔ∏è  –ò—Å–ø—Ä–∞–≤–ª—è—é...\n")
                result = execute_commands(commands)
                display_message_slowly(f" üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:\n    {result}")
            elif response in ["n", "–Ω"]:
                display_message_slowly(f" üö´ –ü—Ä–æ–ø—É—Å–∫–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.\n")
            else:
                display_message_slowly(f" ‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–æ–ø—É—Å–∫–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.\n")



def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    logger.info("–ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    display_message_slowly("\n üéØ  –í–æ—Ç —á—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏:")

    findings, suggestions = parse_reports(MESSAGES_DB_PATH)

    if findings:
        handle_findings(findings)

    if suggestions:
        for suggestion in suggestions:
            display_message_slowly(f"\n {suggestion['title']}\n {suggestion['message']}")

    if not findings and not suggestions:
        display_message_slowly(f" ‚úÖ  –í—Å—ë —Ö–æ—Ä–æ—à–æ!\n üëç  –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n")

    subprocess.run([sys.executable, str(SUMMARY_SCRIPT)])


if __name__ == "__main__":
    main()
