# gradio_admin/tabs/statistics_tab.py
# –í–∫–ª–∞–¥–∫–∞ "Statistics" –¥–ª—è Gradio-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator

import gradio as gr # type: ignore
import pandas as pd # type: ignore
from gradio_admin.functions.user_records import load_user_records
from gradio_admin.functions.format_helpers import format_time
from gradio_admin.functions.table_helpers import update_table
from gradio_admin.functions.format_helpers import format_user_info
from gradio_admin.functions.user_records import load_user_records
from gradio_admin.functions.show_user_info import show_user_info
from modules.traffic_updater import update_traffic_data
from settings import USER_DB_PATH

def statistics_tab():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard."""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    def get_initial_data():
        update_traffic_data(USER_DB_PATH)
        table = update_table(True)
        user_list = ["Select a user"] + table["üë§ User"].tolist() if not table.empty else ["Select a user"]
        return table, user_list

    initial_table, initial_user_list = get_initial_data()

    with gr.Row():
        gr.Markdown("## Statistics")

    # –ß–µ–∫–±–æ–∫—Å Show inactive –∏ –∫–Ω–æ–ø–∫–∞ Refresh
    with gr.Row():
        show_inactive = gr.Checkbox(label="Show inactive", value=True)
        refresh_button = gr.Button("Refresh")

    # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
    with gr.Row():
        search_input = gr.Textbox(label="Search", placeholder="Enter data to filter...", interactive=True)

    # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with gr.Row():
        user_selector = gr.Dropdown(label="Select User", choices=initial_user_list, value="Select a user", interactive=True)
        user_info_display = gr.Textbox(label="User Details", value="", lines=10, interactive=False)

    # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    with gr.Row():
        stats_table = gr.Dataframe(
            headers=["üë§ User", "üìä Used", "üì¶ Limit", "üåê IP Address", "‚ö° St.", "üí≥ $", "UID"],
            value=initial_table,
            interactive=False,
            wrap=True
        )

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
    def refresh_table(show_inactive):
        update_traffic_data(USER_DB_PATH)
        table = update_table(show_inactive)
        if table.empty:
            print("[DEBUG] Table is empty after update.")
        else:
            print(f"[DEBUG] Updated table:\n{table}")
        user_list = ["Select a user"] + table["üë§ User"].tolist() if not table.empty else ["Select a user"]
        print(f"[DEBUG] User list: {user_list}")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º user_info_display
        return "", table, user_list, ""

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Refresh
    refresh_button.click(
        fn=refresh_table,
        inputs=[show_inactive],
        outputs=[search_input, stats_table, user_selector, user_info_display]
    )

    # –ü–æ–∏—Å–∫
    def search_and_update_table(query, show_inactive):
        table = update_table(show_inactive)
        if query:
            table = table.loc[table.apply(lambda row: query.lower() in " ".join(map(str, row)).lower(), axis=1)]
        user_list = ["Select a user"] + table["üë§ User"].tolist() if not table.empty else ["Select a user"]
        print(f"[DEBUG] Filtered user list: {user_list}")
        return table, user_list

    search_input.change(
        fn=search_and_update_table,
        inputs=[search_input, show_inactive],
        outputs=[stats_table, user_selector]
    )

    # –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    def display_user_info(selected_user):
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ selected_user ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
        if isinstance(selected_user, list):
            if len(selected_user) > 0:
                selected_user = selected_user[0]
            else:
                selected_user = "Select a user"

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "Select a user", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        if not selected_user or selected_user == "Select a user":
            return ""

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = show_user_info(selected_user)
        print(f"[DEBUG] User info:\n{user_info}")
        return user_info

    user_selector.change(
        fn=display_user_info,
        inputs=[user_selector],
        outputs=[user_info_display]
    )