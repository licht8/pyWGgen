# gradio_admin/tabs/statistics_tab.py
# –í–∫–ª–∞–¥–∫–∞ "Statistics" –¥–ª—è Gradio-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator

import gradio as gr # type: ignore
import pandas as pd # type: ignore
from gradio_admin.functions.user_records import load_user_records
from gradio_admin.functions.format_helpers import format_time
from gradio_admin.functions.table_helpers import update_table
from gradio_admin.functions.format_helpers import format_user_info
from gradio_admin.functions.user_records import load_user_records
from modules.traffic_updater import update_traffic_data
from settings import USER_DB_PATH

def statistics_tab():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard."""
    with gr.Row():
        gr.Markdown("## Statistics")

    # –ß–µ–∫–±–æ–∫—Å Show inactive –∏ –∫–Ω–æ–ø–∫–∞ Refresh
    with gr.Row():
        show_inactive = gr.Checkbox(label="Show inactive", value=True)
        refresh_button = gr.Button("Refresh")

    # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    with gr.Row():
        selected_user_info = gr.Textbox(
            label="User Information", 
            interactive=False, 
            value="Use the search below for filtering.",
            elem_id="user-info-block"  # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è CSS
        )

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    with gr.Row():
        block_button = gr.Button("Block", elem_id="block-button")
        delete_button = gr.Button("Delete", elem_id="delete-button")

    # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
    with gr.Row():
        search_input = gr.Textbox(label="Search", placeholder="Enter data to filter...", interactive=True)

    # –ù–∞–¥–ø–∏—Å—å –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ–π
    with gr.Row():
        gr.Markdown("Click a cell to view user details after the search.", elem_id="table-help-text", elem_classes=["small-text"])

    # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    with gr.Row():
        stats_table = gr.Dataframe(
            headers=["üë§ User", "üìä Used", "üì¶ Limit", "üåê IP Address", "‚ö° St.", "üí≥ $", "UID"],  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
            value=update_table(True),
            interactive=False,  # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
            wrap=True
        )

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    def show_user_info(selected_data, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        print(f"[DEBUG] selected_data: {selected_data}")
        print(f"[DEBUG] query: {query}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π DataFrame
        if selected_data is None or selected_data.empty:
            return "Select a valid row from the table!"

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É DataFrame
            row = selected_data.iloc[0].tolist()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
            username = row[0] if len(row) > 0 else "N/A"
            username = username.strip().lower()
            print(f"[DEBUG] Extracted username: {username}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ user_records.json
            records = load_user_records()
            user_data = records.get(username)

            if not user_data:
                print(f"[DEBUG] User '{username}' not found in records.")
                return f"User '{username}' not found in records."

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            created = user_data.get("created_at", "N/A")
            expires = user_data.get("expires_at", "N/A")
            int_ip = user_data.get("allowed_ips", "N/A")
            total_transfer = user_data.get("total_transfer", "N/A")
            last_handshake = user_data.get("last_handshake", "N/A")
            status = user_data.get("status", "N/A")
            email = user_data.get("email", "N/A")
            telegram_id = user_data.get("telegram_id", "N/A")
            subscription_plan = user_data.get("subscription_plan", "N/A")
            total_spent = user_data.get("total_spent", "N/A")
            notes = user_data.get("user_notes", "No notes provided")

            user_info = f"""
    üë§ **User:** {username}
    üìß **Email:** {email}
    üå± **Created:** {format_time(created)}
    üî• **Expires:** {format_time(expires)}
    üåê **Internal IP:** {int_ip}
    üìä **Total Transfer:** {total_transfer}
    ü§ù **Last Handshake:** {last_handshake}
    ‚ö° **Status:** {status}
    üìú **Subscription Plan:** {subscription_plan}
    üí≥ **Total Spent:** {total_spent}
    üìù **Notes:** {notes}
    """
            print(f"[DEBUG] User info:\n{user_info}")
            return user_info.strip()
        except Exception as e:
            print(f"[DEBUG] Error: {e}")
            return f"Error processing data: {str(e)}"


    stats_table.select(
        fn=show_user_info,
        inputs=[stats_table, search_input],
        outputs=[selected_user_info]
    )   

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "Refresh"
    def refresh_table(show_inactive):
        update_traffic_data(USER_DB_PATH)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """–û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É."""
        return "", "Please enter a query to filter user data and then Click a cell to view user details after the search. and perform actions.", update_table(show_inactive)

    refresh_button.click(
        fn=refresh_table,
        inputs=[show_inactive],
        outputs=[search_input, selected_user_info, stats_table]
    )

    # –ü–æ–∏—Å–∫
    def search_and_update_table(query, show_inactive):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
        table = update_table(show_inactive)
        if query:
            table = [
                row for row in table if query.lower() in " ".join(map(str, row)).lower()
            ]
        return table

    search_input.change(
        fn=search_and_update_table,
        inputs=[search_input, show_inactive],
        outputs=[stats_table]
    )
