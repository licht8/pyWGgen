# gradio_admin/tabs/statistics_tab.py
# –í–∫–ª–∞–¥–∫–∞ "Statistics" –¥–ª—è Gradio-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ wg_qr_generator

import gradio as gr # type: ignore
import pandas as pd # type: ignore
from gradio_admin.functions.user_records import load_user_records
from gradio_admin.functions.format_helpers import format_time
from gradio_admin.functions.table_helpers import update_table
from gradio_admin.functions.format_helpers import format_user_info
from gradio_admin.functions.user_records import load_user_records
from gradio_admin.functions.show_user_info import show_user_info
from modules.traffic_updater import update_traffic_data
from settings import USER_DB_PATH

def statistics_tab():
    """–°–æ–∑–¥–∞—ë—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WireGuard."""
    with gr.Row():
        gr.Markdown("## Statistics")

    # –ß–µ–∫–±–æ–∫—Å Show inactive –∏ –∫–Ω–æ–ø–∫–∞ Refresh
    with gr.Row():
        show_inactive = gr.Checkbox(label="Show inactive", value=True)
        refresh_button = gr.Button("Refresh")

    # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    with gr.Row():
        selected_user_info = gr.Textbox(
            label="User Information",
            interactive=False,
            value="Select a user to view details."
        )

    # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    with gr.Row():
        stats_table = gr.Dataframe(
            headers=["üë§ User", "üìä Used", "üì¶ Limit", "üåê IP Address", "‚ö° St.", "üí≥ $", "UID"],
            value=update_table(True).values.tolist(),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
            interactive=False  # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        )

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
    def handle_user_selection(row_index):
        print(f"[DEBUG] Raw row_index: {row_index}")  # –û—Ç–ª–∞–¥–∫–∞

        try:
            if row_index is None or row_index == "":
                return "No row selected. Please select a row from the table."

            row_index = int(row_index)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
            print(f"[DEBUG] Parsed row_index: {row_index}")  # –û—Ç–ª–∞–¥–∫–∞

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            table = update_table(True).values.tolist()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
            selected_row = table[row_index]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
            username = selected_row[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print(f"[DEBUG] Extracted username: {username}")
            return show_user_info(username)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        except (ValueError, IndexError) as e:
            print(f"[DEBUG] Error in handle_user_selection: {e}")  # –û—Ç–ª–∞–¥–∫–∞
            return "Invalid row index. Please try again."
        except Exception as e:
            print(f"[DEBUG] Unexpected error in handle_user_selection: {e}")  # –û—Ç–ª–∞–¥–∫–∞
            return f"Error processing data: {str(e)}"

    # –ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö
    stats_table.select(
        fn=handle_user_selection,
        inputs=None,  # –£–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        outputs=[selected_user_info]
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Refresh
    def refresh_table(show_inactive):
        update_traffic_data(USER_DB_PATH)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        return update_table(show_inactive).values.tolist(), "Select a user to view details."

    refresh_button.click(
        fn=refresh_table,
        inputs=[show_inactive],
        outputs=[stats_table, selected_user_info]
    )

    return gr.Blocks()