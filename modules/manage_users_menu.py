#!/usr/bin/env python3
# modules/manage_users_menu.py
# –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ WireGuard

import os
import json
import subprocess
from modules.utils import get_wireguard_subnet, read_json, write_json
import sys
from settings import USER_DB_PATH, SERVER_CONFIG_FILE, WG_CONFIG_DIR, QR_CODE_DIR

def ensure_directory_exists(filepath):
    """–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    directory = os.path.dirname(filepath)
    if not os.path.exists(directory):
        os.makedirs(directory)

def load_user_records():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON."""
    return read_json(USER_DB_PATH)

def create_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ main.py."""
    username = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
    if not username:
        print("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    email = input("–í–≤–µ–¥–∏—Ç–µ email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip() or "N/A"
    telegram_id = input("–í–≤–µ–¥–∏—Ç–µ Telegram ID (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip() or "N/A"

    try:
        subprocess.run(
            ["python3", os.path.join("main.py"), username, email, telegram_id],
            check=True,
            cwd=os.path.abspath(os.path.dirname(__file__) + "/../")
        )

    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


def list_users():
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    records = load_user_records()
    if not records:
        print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    print("\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ WireGuard:")
    for username, data in records.items():
        allowed_ips = data.get("allowed_ips", "N/A")
        status = data.get("status", "N/A")
        print(f"  - {username}: {allowed_ips} | –°—Ç–∞—Ç—É—Å: {status}")


def delete_user():
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    username = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()
    if not username:
        print("‚ùå –û—à–∏–±–∫–∞: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    print(f"‚û°Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{username}'.")

    if not os.path.exists(USER_DB_PATH):
        print(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {USER_DB_PATH}")
        return

    try:
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_data = read_json(USER_DB_PATH)
        if username not in user_data:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data.pop(username)
        write_json(USER_DB_PATH, user_data)
        print(f"üìù –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö.")

        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        wg_config_path = WG_CONFIG_DIR / f"{username}.conf"
        if wg_config_path.exists():
            wg_config_path.unlink()
            print(f"üóëÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{wg_config_path}' —É–¥–∞–ª–µ–Ω–∞.")

        # –£–¥–∞–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        qr_code_path = QR_CODE_DIR / f"{username}.png"
        if qr_code_path.exists():
            qr_code_path.unlink()
            print(f"üóëÔ∏è QR-–∫–æ–¥ '{qr_code_path}' —É–¥–∞–ª—ë–Ω.")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        public_key = extract_public_key(username, SERVER_CONFIG_FILE)
        if not public_key:
            print(f"‚ùå –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard.")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ WireGuard
        subprocess.run(["sudo", "wg", "set", "wg0", "peer", public_key, "remove"], check=True)
        print(f"üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É–¥–∞–ª–µ–Ω –∏–∑ WireGuard.")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard
        remove_peer_from_config(public_key, SERVER_CONFIG_FILE, username)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}': {e}")

def extract_public_key(username, config_path):
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard.
    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É WireGuard.
    :return: –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        with open(config_path, "r") as f:
            lines = f.readlines()

        found_username = False
        for line in lines:
            if username in line:
                found_username = True
            elif found_username and line.strip().startswith("PublicKey"):
                return line.split("=", 1)[1].strip()
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
        return None

def remove_peer_from_config(public_key, config_path, client_name):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ [Peer] –∏ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ WireGuard.
    :param public_key: –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É WireGuard.
    :param client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞.
    """
    try:
        with open(config_path, "r") as f:
            lines = f.readlines()

        updated_lines = []
        skip_lines = 0

        for line in lines:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞
            if line.strip() == f"### Client {client_name}":
                skip_lines = 5  # –£–¥–∞–ª—è–µ–º 5 —Å—Ç—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                continue

            # –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —É–¥–∞–ª—è–µ–º—ã–º –±–ª–æ–∫–æ–º
            if skip_lines > 0:
                skip_lines -= 1
                continue

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            updated_lines.append(line)

        # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open(config_path, "w") as f:
            f.writelines(updated_lines)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def manage_users_menu():
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    while True:
        print("\n========== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ==========")
        print("1. üå± –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("2. üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("3. ‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("0. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("===============================================")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
        if choice == "1":
            create_user()
        elif choice == "2":
            list_users()
        elif choice == "3":
            delete_user()
        elif choice in {"0", "q"}:
            break
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
