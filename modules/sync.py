#!/usr/bin/env python3

import json
import shutil
from pathlib import Path
from settings import USER_DB_PATH, SERVER_CONFIG_FILE
from modules.main_registration_fields import create_user_record
from modules.qr_generator import generate_qr_code

def find_user_files(username, config_dir, qr_dir):
    """–ò—â–µ—Ç —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–Ω—Ñ–∏–≥, QR) –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö."""
    config_path = next(
        (f for ext in ['.conf', '.txt'] 
         if (f := config_dir / f"{username}{ext}").exists()), 
        None
    )
    qr_path = next(
        (f for ext in ['.png', '.jpg', '.svg'] 
         if (f := qr_dir / f"{username}{ext}").exists()), 
        None
    )
    return config_path, qr_path


def sync_users_from_config_paths(config_dir_str: str, qr_dir_str: str):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ 
    –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏ QR‚Äë–∫–æ–¥–æ–≤.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (success: bool, log: str).
    """
    logs = []

    try:
        config_dir = Path(config_dir_str)
        qr_dir = Path(qr_dir_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—É—Ç–∏
        if not config_dir.is_dir():
            raise ValueError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config_dir}")
        if not qr_dir.is_dir():
            raise ValueError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å QR‚Äë–∫–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {qr_dir}")

        logs.append("=== üõ† –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===")
        logs.append(f"–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥–∞–º: {config_dir}")
        logs.append(f"–ü—É—Ç—å –∫ QR‚Äë–∫–æ–¥–∞–º: {qr_dir}\n")

        # –®–ê–ì 1: –ø–∞—Ä—Å–∏–º SERVER_CONFIG_FILE
        with open(SERVER_CONFIG_FILE, "r") as f:
            config_content = f.read()

        users = []
        current_user = {}

        for line in config_content.split('\n'):
            line = line.strip()
            if line.startswith("### Client"):
                # –ï—Å–ª–∏ –µ—Å—Ç—å "—Ç–µ–∫—É—â–∏–π" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                if current_user:
                    users.append(current_user)
                current_user = {"username": line.split("### Client")[1].strip()}
            elif line.startswith("PublicKey ="):
                current_user["public_key"] = line.split("=")[1].strip()
            elif line.startswith("PresharedKey ="):
                current_user["preshared_key"] = line.split("=")[1].strip()
            elif line.startswith("AllowedIPs ="):
                current_user["allowed_ips"] = line.split("=")[1].strip()
            elif line == "" and current_user:
                users.append(current_user)
                current_user = {}

        # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–ª—Å—è –Ω–µ–∑–∞–ø–∏—Å–∞–Ω
        if current_user:
            users.append(current_user)

        # –®–ê–ì 2: –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        user_records = {}
        if Path(USER_DB_PATH).exists():
            with open(USER_DB_PATH, "r") as f:
                user_records = json.load(f)

        # –®–ê–ì 3: –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        new_users = 0
        for user in users:
            username = user["username"]
            logs.append(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
            
            # –ò—â–µ–º —Ñ–∞–π–ª—ã
            config_path, qr_path = find_user_files(username, config_dir, qr_dir)
            
            # –¶–µ–ª–µ–≤—ã–µ –ø—É—Ç–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
            target_config = Path(f"user/data/wg_configs/{username}.conf")
            target_qr = Path(f"user/data/qrcodes/{username}.png")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            target_config.parent.mkdir(parents=True, exist_ok=True)
            target_qr.parent.mkdir(parents=True, exist_ok=True)

            # –ö–æ–ø–∏—Ä—É–µ–º/—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            if config_path:
                shutil.copy(config_path, target_config)
                logs.append(f"  ‚úÖ Config —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {config_path} ‚Üí {target_config}")
            else:
                # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                target_config.touch()
                logs.append(f"  ‚ö†Ô∏è Config –¥–ª—è {username} –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.")

            # –ö–æ–ø–∏—Ä—É–µ–º/–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR
            if qr_path:
                shutil.copy(qr_path, target_qr)
                logs.append(f"  ‚úÖ QR‚Äë–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {qr_path} ‚Üí {target_qr}")
            elif config_path:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥
                generate_qr_code(target_config.read_text(), str(target_qr))
                logs.append(f"  üîÑ QR‚Äë–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞.")
            else:
                logs.append(f"  ‚ö†Ô∏è QR‚Äë–∫–æ–¥ –Ω–µ —Å–æ–∑–¥–∞–Ω (–Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∞).")

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_records
            if username not in user_records:
                user_record = create_user_record(
                    username=username,
                    address=user.get("allowed_ips", ""),
                    public_key=user.get("public_key", ""),
                    preshared_key=user.get("preshared_key", ""),
                    qr_code_path=f"user/data/qrcodes/{username}.png"
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –≤ –∑–∞–ø–∏—Å—å
                user_record.update({
                    "config_path": str(target_config),
                    "qr_code_path": str(target_qr) if target_qr.exists() else None
                })

                user_records[username] = user_record
                new_users += 1

        # –®–ê–ì 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º user_records
        with open(USER_DB_PATH, "w") as f:
            json.dump(user_records, f, indent=4)

        logs.append(f"\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: {new_users}")
        return True, "\n".join(logs)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"
        logs.append(error_msg)
        return False, "\n".join(logs)

if __name__ == "__main__":
    # –ï—Å–ª–∏ –æ—á–µ–Ω—å –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é
    # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–º–∏ –ø—É—Ç—è–º–∏.
    # –ù–æ –æ–±—ã—á–Ω–æ –¥–ª—è Gradio —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ.
    pass