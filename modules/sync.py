#!/usr/bin/env python3
import json
import shutil
from pathlib import Path
from settings import USER_DB_PATH, SERVER_CONFIG_FILE
from modules.main_registration_fields import create_user_record
from modules.qr_generator import generate_qr_code

def get_valid_path(prompt):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—É—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    while True:
        path = Path(input(prompt).strip())
        if path.exists() and path.is_dir():
            return path
        print(f"–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")

def find_user_files(username, config_dir, qr_dir):
    """–ò—â–µ—Ç —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö"""
    # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥–∞
    config_path = next(
        (f for ext in ['.conf', '.txt'] 
         if (f := config_dir / f"{username}{ext}").exists()), None
    )
    
    # –ü–æ–∏—Å–∫ QR-–∫–æ–¥–∞
    qr_path = next(
        (f for ext in ['.png', '.jpg', '.svg'] 
         if (f := qr_dir / f"{username}{ext}").exists()), None
    )
    
    return config_path, qr_path

def sync_users_interactive():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –≤–≤–æ–¥–æ–º"""
    try:
        # –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –ø—É—Ç–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n=== üõ† –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===")
        print("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–∞–º:")
        
        config_dir = get_valid_path("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: ")
        qr_dir = get_valid_path("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å QR-–∫–æ–¥–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: ")

        # –®–∞–≥ 2: –ü–∞—Ä—Å–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        with open(SERVER_CONFIG_FILE, "r") as f:
            config_content = f.read()

        users = []
        current_user = {}
        
        for line in config_content.split('\n'):
            line = line.strip()
            
            if line.startswith("### Client"):
                if current_user:
                    users.append(current_user)
                current_user = {"username": line.split("### Client")[1].strip()}
            
            elif line.startswith("PublicKey ="):
                current_user["public_key"] = line.split("=")[1].strip()
            
            elif line.startswith("PresharedKey ="):
                current_user["preshared_key"] = line.split("=")[1].strip()
            
            elif line.startswith("AllowedIPs ="):
                current_user["allowed_ips"] = line.split("=")[1].strip()
            
            elif line == "" and current_user:
                users.append(current_user)
                current_user = {}

        if current_user:
            users.append(current_user)

        # –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_records = {}
        if Path(USER_DB_PATH).exists():
            with open(USER_DB_PATH, "r") as f:
                user_records = json.load(f)

        new_users = 0
        for user in users:
            username = user["username"]
            print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
            
            # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
            config_path, qr_path = find_user_files(username, config_dir, qr_dir)
            
            # –ü—É—Ç–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
            target_config = Path(f"user/data/wg_configs/{username}.conf")
            target_qr = Path(f"user/data/qrcodes/{username}.png")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
            target_config.parent.mkdir(parents=True, exist_ok=True)
            target_qr.parent.mkdir(parents=True, exist_ok=True)

            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
            if config_path:
                shutil.copy(config_path, target_config)
                print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {config_path} ‚Üí {target_config}")
            else:
                print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è {username} –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.")
                target_config.touch()
                
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è/–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞
            if qr_path:
                shutil.copy(qr_path, target_qr)
                print(f"‚úÖ QR-–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {qr_path} ‚Üí {target_qr}")
            elif config_path:
                generate_qr_code(target_config.read_text(), str(target_qr))
                print(f"üîÑ QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞")
            else:
                print(f"‚ö†Ô∏è QR-–∫–æ–¥ –¥–ª—è {username} –Ω–µ —Å–æ–∑–¥–∞–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥)")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
            if username not in user_records:
                user_records[username] = create_user_record(
                    username=username,
                    address=user["allowed_ips"],
                    public_key=user["public_key"],
                    preshared_key=user["preshared_key"],
                    config_path=str(target_config),
                    qr_code_path=str(target_qr) if target_qr.exists() else None
                )
                new_users += 1

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        with open(USER_DB_PATH, "w") as f:
            json.dump(user_records, f, indent=4)

        print(f"\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users}")
        return True

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False

if __name__ == "__main__":
    sync_users_interactive()