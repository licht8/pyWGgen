#!/usr/bin/env python3
import json
import shutil
from pathlib import Path
from settings import USER_DB_PATH, SERVER_CONFIG_FILE
from modules.main_registration_fields import create_user_record
from modules.qr_generator import generate_qr_code

def get_valid_path(prompt):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—É—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."""
    while True:
        path_str = input(prompt).strip()
        path = Path(path_str)
        if path.exists() and path.is_dir():
            return path
        print(f"–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{path_str}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n")

def find_user_files(username, config_dir, qr_dir):
    """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–Ω—Ñ–∏–≥, QR) –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö."""
    config_path = next(
        (f for ext in ['.conf', '.txt']
         if (f := config_dir / f"{username}{ext}").exists()), 
        None
    )
    qr_path = next(
        (f for ext in ['.png', '.jpg', '.svg']
         if (f := qr_dir / f"{username}{ext}").exists()), 
        None
    )
    return config_path, qr_path

def sync_users_from_config_paths(config_dir_str: str, qr_dir_str: str):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. 
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ø—É—Ç–µ–π –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –∏ QR‚Äë–∫–æ–¥–∞–º–∏.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (success: bool, logs: str), 
    –≥–¥–µ logs - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç (–ª–æ–≥–∏) –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ.
    """
    logs = []
    try:
        config_dir = Path(config_dir_str)
        qr_dir = Path(qr_dir_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if not config_dir.is_dir():
            raise ValueError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config_dir}")
        if not qr_dir.is_dir():
            raise ValueError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è QR-–∫–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {qr_dir}")

        logs.append("=== üõ† –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===")
        logs.append(f"–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥–∞–º: {config_dir}")
        logs.append(f"–ü—É—Ç—å –∫ QR‚Äë–∫–æ–¥–∞–º: {qr_dir}\n")

        # –ü–∞—Ä—Å–∏–º SERVER_CONFIG_FILE
        with open(SERVER_CONFIG_FILE, "r") as f:
            config_content = f.read()

        users = []
        current_user = {}

        for line in config_content.split('\n'):
            line = line.strip()
            if line.startswith("### Client"):
                if current_user:
                    users.append(current_user)
                current_user = {"username": line.split("### Client")[1].strip()}
            elif line.startswith("PublicKey ="):
                current_user["public_key"] = line.split("=")[1].strip()
            elif line.startswith("PresharedKey ="):
                current_user["preshared_key"] = line.split("=")[1].strip()
            elif line.startswith("AllowedIPs ="):
                current_user["allowed_ips"] = line.split("=")[1].strip()
            elif line == "" and current_user:
                users.append(current_user)
                current_user = {}

        if current_user:
            users.append(current_user)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_records = {}
        if Path(USER_DB_PATH).exists():
            with open(USER_DB_PATH, "r") as f:
                user_records = json.load(f)

        new_users = 0
        for user in users:
            username = user["username"]
            logs.append(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

            # –ò—â–µ–º —Ñ–∞–π–ª—ã
            config_path, qr_path = find_user_files(username, config_dir, qr_dir)
            
            # –¶–µ–ª–µ–≤—ã–µ –ø—É—Ç–∏
            target_config = Path(f"user/data/wg_configs/{username}.conf")
            target_qr = Path(f"user/data/qrcodes/{username}.png")

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            target_config.parent.mkdir(parents=True, exist_ok=True)
            target_qr.parent.mkdir(parents=True, exist_ok=True)

            # –ö–æ–ø–∏—Ä—É–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            if config_path:
                shutil.copy(config_path, target_config)
                logs.append(f"  ‚úÖ Config —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {config_path} ‚Üí {target_config}")
            else:
                target_config.touch()
                logs.append(f"  ‚ö†Ô∏è Config –¥–ª—è {username} –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.")

            # –ö–æ–ø–∏—Ä—É–µ–º –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR‚Äë–∫–æ–¥
            if qr_path:
                shutil.copy(qr_path, target_qr)
                logs.append(f"  ‚úÖ QR‚Äë–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {qr_path} ‚Üí {target_qr}")
            elif config_path:
                qr_text = target_config.read_text()
                generate_qr_code(qr_text, str(target_qr))
                logs.append(f"  üîÑ QR‚Äë–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥–∞.")
            else:
                logs.append(f"  ‚ö†Ô∏è QR‚Äë–∫–æ–¥ –Ω–µ —Å–æ–∑–¥–∞–Ω (–∫–æ–Ω—Ñ–∏–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).")

            # –û–±–Ω–æ–≤–ª—è–µ–º user_records
            if username not in user_records:
                from modules.main_registration_fields import create_user_record
                user_record = create_user_record(
                    username=username,
                    address=user.get("allowed_ips", ""),
                    public_key=user.get("public_key", ""),
                    preshared_key=user.get("preshared_key", ""),
                    qr_code_path=str(target_qr)
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
                user_record["config_path"] = str(target_config)
                user_record["qr_code_path"] = str(target_qr) if target_qr.exists() else None

                user_records[username] = user_record
                new_users += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        with open(USER_DB_PATH, "w") as f:
            json.dump(user_records, f, indent=4)

        logs.append(f"\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: {new_users}")
        return True, "\n".join(logs)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"
        logs.append(error_msg)
        return False, "\n".join(logs)


def sync_users_from_config():
    """
    –°—Ç–∞—Ä–∞—è ¬´–∫–æ–Ω—Å–æ–ª—å–Ω–∞—è¬ª —Ñ—É–Ω–∫—Ü–∏—è: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—É—Ç–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
    –∏ –≤—ã–∑—ã–≤–∞–µ—Ç sync_users_from_config_paths.
    """
    try:
        print("\n=== üõ† USER SYNCHRONIZATION (–∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º) ===")
        config_dir = get_valid_path("Client configs directory: ")
        qr_dir = get_valid_path("QR codes directory: ")

        success, log = sync_users_from_config_paths(str(config_dir), str(qr_dir))
        print(log)  # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å

        return success
    except KeyboardInterrupt:
        print("\n–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        return False


if __name__ == "__main__":
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø—Ä—è–º—É—é, —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (—á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å).
    sync_users_from_config()
